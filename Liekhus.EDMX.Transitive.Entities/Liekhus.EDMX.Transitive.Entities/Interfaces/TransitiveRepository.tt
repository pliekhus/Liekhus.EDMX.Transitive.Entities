<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="$(ProjectDir)TiraggoEdmx\TiraggoEdmx.EF.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="TiraggoEdmx_v3" #>
<#
    string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);

	// ******************************************
	// *** CHANGE THIS TO YOUR EDMX FILE NAME ***
	// ******************************************
	string edxmFileName = @"..\TransitiveModel.edmx";

    string inputFile = edxmFileName;
    string inputPath = path + "\\" + edxmFileName;

	//get the stored procedure mapping attributes to know which entities to add to the repository
	XmlDocument xml = new XmlDocument();
	xml.Load(inputPath);
	XmlNamespaceManager nsmgr = new XmlNamespaceManager(xml.NameTable);
	nsmgr.AddNamespace("edmx", "http://schemas.microsoft.com/ado/2009/11/edmx");
	nsmgr.AddNamespace("cs", "http://schemas.microsoft.com/ado/2009/11/mapping/cs");
	XmlNodeList entityMappingNodes = xml.SelectSingleNode("edmx:Edmx", nsmgr)
								.SelectSingleNode("edmx:Runtime", nsmgr)
								.SelectSingleNode("edmx:Mappings", nsmgr)
								.SelectSingleNode("cs:Mapping", nsmgr)
								.SelectSingleNode("cs:EntityContainerMapping", nsmgr)
								.SelectSingleNode("cs:EntitySetMapping", nsmgr)
								.SelectNodes("cs:EntityTypeMapping", nsmgr);

    MetadataLoader loader = new MetadataLoader(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var code = new CodeGenerationTools(this);
	EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);
    var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

    fileManager.StartNewFile(code.Escape(container) + ".Generated.cs");

#>
//**********************************************************************************
// This file is generated by a T4 template.  Any modifications to this file will
// be overridden the next time this file is generated.  DO NOT MODIFY THIS FILE!!!
//**********************************************************************************
using System;
using System.Collections.Generic;

<#

    ClearIndent();
    BeginNamespace(code);

#>
    <#="public interface " + code.Escape(container)#>
    <#="{"#>

	<#
    // for each mapped entity
	foreach(XmlNode entityMap in entityMappingNodes)
    //foreach (EntityType entity in itemCollection.GetItems<EntityType>().Where(x => x.Abstract == false).OrderBy(e => e.Name))
    {
		EntityType entity = itemCollection.GetItems<EntityType>().Where(x => x.Abstract == false && x.FullName == entityMap.Attributes["TypeName"].Value).FirstOrDefault();
		if(entity!=null)
		{
		#>
	<#="void Save" + entity.Name + "(" + entity.Name + " item);"#>
		<#}
	}#>
   <#="}"#>
<#
    EndNamespace(code);
	fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
#>
}
<#+
    }
}
#>