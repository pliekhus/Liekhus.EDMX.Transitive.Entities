<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml.Serialization" #>
<#
    string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);

	// ******************************************
	// *** CHANGE THIS TO YOUR EDMX FILE NAME ***
	// ******************************************
	string edxmFileName = @"TransitiveModel.edmx";

    string inputFile = edxmFileName;
    string inputPath = path + "\\" + edxmFileName;

    MetadataLoader loader = new MetadataLoader(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var code = new CodeGenerationTools(this);
    EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);

    // for each entity
    foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        // Everything you need including your low level SQL metadata types
        fileManager.StartNewFile(entity.Name + ".Generated.cs");
#>
//**********************************************************************************
// This file is generated by a T4 template.  Any modifications to this file will
// be overridden the next time this file is generated.  DO NOT MODIFY THIS FILE!!!
//**********************************************************************************
using System;
using System.Runtime.Serialization;

<#
        ClearIndent();
        BeginNamespace(code);

#>
	<#="[DataContract]"#>
    <#="public " + (entity.Abstract == true ? "abstract " : string.Empty) + "partial class " + entity.Name + (entity.BaseType == null || string.IsNullOrEmpty(entity.BaseType.Name) == true ? string.Empty : " : " + entity.BaseType.Name)#>
    <#="{"#>
<#
        foreach (EdmProperty prop in entity.Properties.Where(x => x.DeclaringType.Name == entity.Name))
        {#>
		<#="[DataMember]"#>
		<#=Accessibility.ForProperty(prop) + " " + prop.TypeUsage.EdmType.Name + " " + prop.Name + " { " + Accessibility.ForGetter(prop) + " get; " + Accessibility.ForSetter(prop) + " set; }"#>
<#      }

        PopIndent();
#>
    <#="}"#>
<#

        EndNamespace(code);
    }
    fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
#>
}
<#+
    }
}
#>